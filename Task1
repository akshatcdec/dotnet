You are a developer working on a project that involves designing a system for a university. The system needs to handle different types of users, including students, professors, and administrative staff. You have been tasked with designing the class hierarchy for these user types. Your goal is to determine whether to use abstract classes or interfaces for the implementation.

Evaluate whether the shared attributes and behaviors can be effectively represented using an abstract class or an interface. Consider the following questions:

Are there any default implementations or common behavior that can be provided by a base class?
Do the user types have a "is-a" relationship with the shared attributes and behaviors, suggesting inheritance through an abstract class?
Can the user types implement the shared attributes and behaviors independently, suggesting the use of interface
--------------------------------------------------------------------------------------------------------------------------------------
=================================================================================================================================================================================================
public abstract class User
        {
            /*
             You are a developer working on a project that involves designing a system for a university. 
The system needs to handle different types of users, 
including 
students, 
professors, 
and administrative staff. 
You have been tasked with designing the class hierarchy for these user types. 
            Your goal is to determine whether 
            to use abstract classes or interfaces for the implementation.
             */
            public string Name { get; set; }
            public string Email { get; set; }
            public string AaharNo { get; set; }
            public abstract void DisplayUserInfo();

        }
        public class Student : User
        {
            public string Course { get; set; }
            public override void DisplayUserInfo()
            {
                Console.WriteLine($" Name : {Name} Email : {Email} AaharNo : {AaharNo}Course : {Course}");
                Console.WriteLine(" Name : "+Name+ " Email :" + Email + " AaharNo :"+ AaharNo + "Course : "+ Course);
            }
        }
        public class Professors : User
        {
            public string Department { get; set; }
            public override void DisplayUserInfo()
            {
                Console.WriteLine($" Name : {Name} Email : {Email} AaharNo : {AaharNo}Department : {Department}");
                Console.WriteLine(" Name : " + Name + " Email :" + Email + " AaharNo :" + AaharNo + "Department : " + Department);
            }
        }
        public class Administrative : User
        {
            public string Role { get; set; }
            public override void DisplayUserInfo()
            {
                Console.WriteLine($" Name : {Name} Email : {Email} AaharNo : {AaharNo} Role : {Role}");
                Console.WriteLine(" Name : " + Name + " Email :" + Email + " AaharNo :" + AaharNo + " Role : " + Role);
            }
        }
============================================================================================================================================================================================================================================

You are a developer tasked with designing a system for an online shopping platform. The system needs to handle different types of products, such as electronics, clothing, and books. Your goal is to implement the class hierarchy for these product types using interfaces instead of abstract classes.

Instructions:

Study the requirements and characteristics of the product types in the online shopping platform.

Identify the common attributes and behaviors shared by all product types, such as name, price, and description.

Evaluate whether the shared attributes and behaviors can be effectively represented using interfaces. Consider factors such as code reusability, flexibility, and multiple inheritance.

Design and implement interfaces that define the common attributes and behaviors for the product types. For example, you may create an interface called IProduct with properties like Name, Price, and Description.

Implement classes for each product type (electronics, clothing, books) and have them implement the corresponding interfaces. For example, you may create a class Electronics that implements IProduct and includes additional properties specific to electronics.
